package PrakPBO;

//Mengimport scanner untuk membaca inputan user
import java.util.Scanner;

public class Main {
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Selamat datang di game Defense FILKOM !");

        System.out.print("Silahkan masukkan nama player : ");
//Membuat inputan nama user
        String nama = sc.next();

//Instansiasi objek

        Magician mage = new Magician (10, 60,

                100);

        Healer support = new Healer (10, 10,

                70);

        Warrior fighter = new Warrior (30, 40,

                100);

        Titan monster = new Titan (0, 45, 200);
        int pilihan = 0;
//Membuat Exception Handling

        do{
            try{
                System.out.println("Silakan pilih karakter yang anda inginkan : ");

                String[] Role = {"1. Magician",

                        "2. Healer", "3. Warrior"};

                for(String Hero : Role){
                    System.out.println(Hero);
                }
                pilihan = sc.nextInt();
                if(pilihan < 1 || pilihan > 3)
                    throw new
                            NumberFormatException();

            }
            catch (Exception e){

//Membuat output apabila inputan user salah

                if( e instanceof

                        NumberFormatException){

                    System.out.println("Silakan masukan angka antara 1-3");
                } else{
                    System.out.println("Tolong masukan angka !");

                    sc.next();
                }
            }
        }
        while (pilihan == 0);
        System.out.println("Selamat Datang, " + nama + " !");

        switch(pilihan){

//Membuat pilihan menggunakan switch case

            case 1 :
                int i = 1;
                mage.info();
                while(mage.getHP() != 0 &&

                        monster.getHP() != 0){
                    System.out.println("===============" + " TURN "
                            + i + " ===============");

                    if(mage.attack()){
                        monster.receiveDamage(mage.getAttack());

                    }
                    if(monster.attack()){
                        mage.receiveDamage(monster.getAttack());

                    }

                    System.out.println("Enemy's HP\t : " +
                            monster.getHP());

                    System.out.println(nama

                            + "'s HP\t : " + mage.getHP());
                    i++;
                }

                System.out.println("======================================");

                if(monster.getHP() == 0){
                    System.out.println(nama

                            + " menang");

                    System.out.println();
                }
                if(mage.getHP() == 0){
                    System.out.println("Titan menang");

                            System.out.println();
                }

                System.out.println("=============== PLAYER ===============");

                mage.info();
                System.out.println();
                System.out.println("=============== MUSUH ================");

                monster.info();
                break;
            case 2 :
                int j = 1;
                support.info();
                while(support.getHP() != 0

                        && monster.getHP() != 0){
                    System.out.println("=============== " + "TURN "
                            + j + " ===============");

                    if(j % 2 == 0){
                        support.Heal();
                    }
                    if(support.attack()){
                        monster.receiveDamage(support.getAttack());

                    }
                    if(monster.attack()){
                        support.receiveDamage(monster.getAttack());

                    }

                    System.out.println("Enemy's HP\t : " +
                            monster.getHP());

                    System.out.println(nama

                            + "'s HP\t : " + support.getHP());
                    j++;
                }

                System.out.println("======================================");

                if(monster.getHP() == 0)
                    System.out.println(nama

                            + " menang");

                System.out.println();
                if(support.getHP() == 0)
                    System.out.println("Titan menang");
                            System.out.println("=============== PLAYER ===============");

                support.info();
                System.out.println();
                System.out.println("=============== MUSUH ================");

                monster.info();
                break;
            case 3 :
                int k = 1;
                fighter.info();
                while(fighter.getHP() != 0

                        && monster.getHP() != 0){
                    System.out.println("=============== " + "TURN " + k + " ===============");

                    if(fighter.attack()){
                        monster.receiveDamage(fighter.getAttack());

                    }
                    if(monster.attack()){
                        fighter.receiveDamage(monster.getAttack());

                    }

                    System.out.println("Enemy's HP\t : " +
                            monster.getHP());

                    System.out.println(nama

                            + "'s HP\t : " + fighter.getHP());
                    k++;
                }

                System.out.println("======================================");

                if(monster.getHP() == 0)
                    System.out.println(nama

                            + " menang\n");

                if(fighter.getHP() == 0)
                    System.out.println("Titan menang\n");
                            System.out.println("=============== PLAYER ===============");

                fighter.info();
                System.out.println();
                System.out.println("================ MUSUH ===============");

                monster.info();
                break;
        }
    }
}
class Warrior extends Character{
    private int defense;
    private int attack;
    private int HP;
    Warrior (int defense, int attack, int HP){
        super(defense, attack, HP);
//Mendapatkan nilai tiap variabel
        this.defense = defense;
        this.attack = attack;
        this.HP = HP;
    }
    //Membuat kelas untuk kesempatan terkena serangan
    public boolean attack(){
        double Hit = Math.random();
        if (Hit < 0.6){
            return true;
        }
        return false;
    }
}
class Healer extends Character{
    private int defense;
    private int attack;
    private int HP;
    Healer (int defense, int attack, int HP){
        super(defense, attack, HP);
        this.defense = defense;
        this.attack = attack;
        this.HP = HP;
    }
    //Membuat kelas untuk kesempatan terkena serangan
    public boolean attack(){
        double Hit = Math.random();
        if (Hit < 0.85){
            return true;
        }
        return false;
    }
    public void Heal(){
        System.out.println("Menggunakan skill heal");
    }
    //Membuat getter dan setter
    public int getHP(){
        return this.HP;
    }
    public void setHP(){
        System.out.println(this.HP);
    }
}
class Magician extends Character{
    private int defense;
    private int attack;
    private int HP;
    Magician (int defense, int attack, int HP){
        super(defense, attack, HP);
        this.defense = defense;
        this.attack = attack;
        this.HP = HP;
    }
    //Membuat kelas untuk kesempatan terkena serangan
    public boolean attack(){
        double Hit = Math.random();
        if (Hit < 0.35){
            return true;
        }
        return false;
    }
}
class Titan extends Character{
    //Attribute
    private int defense;
    private int attack;
    private int HP;
    Titan(int defense, int attack, int HP){
        super(defense, attack, HP);
//Mendapatkan nilai tiap variabel
        this.defense = defense;
        this.attack = attack;
        this.HP = HP;
    }
    //Membuat kelas untuk kesempatan terkena serangan
    public boolean attack(){
        double Hit = Math.random();
        if (Hit < 0.40){
            return true;
        }
        return false;
    }
}
abstract class Character {
    //Attribute
    private int defense;
    private int attack;
    private int HP;
    Character(int defense, int attack, int HP){
        this.defense = defense;
        this.attack = attack;
        this.HP = HP;
    }
    public abstract boolean attack();
    //Membuat fungsi damage yang diterima
    public void receiveDamage(int damage){
        if(damage > defense){
            this.HP = (HP+defense)-damage;
            if(this.HP <= 0){
                HP = 0;
            }
        }
    }
    //Membuat fungsi info
    public void info(){
        System.out.println("--------------- STATUS ---------------");

                System.out.println("ROLE\t : " +

                        getClass().getSimpleName());

        System.out.println("HP\t\t : " +

                getHP());

        System.out.println("ATTACK\t : " +

                getAttack());

        System.out.println("DEFENSE\t : " +

                getDefense());
    }
    //Membuat getter dan setter
    public int getHP(){
        return this.HP;
    }
    public void setHP(){
        System.out.println(this.HP);
    }
    public int getAttack(){
        return this.attack;
    }
    public void setAttack(){
        System.out.println(this.attack);
    }
    public int getDefense(){
        return this.defense;
    }
    public void setDefense(){
        System.out.println(this.defense);
    }
}
